{"version":3,"file":"reactjs-s4y.cjs.production.min.js","sources":["../src/index.tsx"],"sourcesContent":["import React, { PureComponent, CSSProperties } from 'react';\n\nfunction getWindow(el: Document) {\n  return el.nodeType === 9 && el.defaultView;\n}\n\nfunction offset(el: Element) {\n  const doc = el?.ownerDocument;\n  const docElem = doc.documentElement;\n  const win: any = getWindow(doc);\n  let box = { top: 0, left: 0 };\n\n  if (!doc) {\n    return {\n      top: 0,\n      left: 0,\n    };\n  }\n\n  if (typeof el.getBoundingClientRect !== typeof undefined) {\n    box = el.getBoundingClientRect();\n  }\n\n  return {\n    top: box.top + win?.pageYOffset - docElem.clientTop,\n    left: box.left + win?.pageXOffset - docElem.clientLeft,\n  };\n}\n\ninterface StickyProps {\n  children: React.ReactNode | ((isSticky: boolean) => React.ReactNode);\n  offsetTop: number;\n  containerSelectorFocus: string;\n  zIndex: number;\n  stickyEnableRange: number[];\n  onChange: (isSticky: boolean) => void;\n}\n\ninterface StickyState {\n  isEnableSticky: boolean;\n  targetHeight: number;\n  innerPosition: string;\n  containerMeasure: Partial<DOMRect>;\n  isLong: boolean;\n  innerTop: number;\n}\n\ntype StickyDefaultProps = Pick<\n  StickyProps,\n  | 'offsetTop'\n  | 'containerSelectorFocus'\n  | 'zIndex'\n  | 'stickyEnableRange'\n  | 'onChange'\n>;\n\nclass Sticky extends PureComponent<StickyProps, StickyState> {\n  private $container!: any;\n  private $inner!: any;\n  private prevScrollY!: number;\n  private isPrevSticky?: boolean;\n\n  public static defaultProps: StickyDefaultProps = {\n    offsetTop: 0,\n    containerSelectorFocus: 'body',\n    zIndex: 10,\n    stickyEnableRange: [0, Infinity],\n    onChange: () => {},\n  };\n\n  public state: StickyState = {\n    isEnableSticky: false,\n    targetHeight: Infinity,\n    innerPosition: 'static',\n    containerMeasure: {},\n    isLong: false,\n    innerTop: 0,\n  };\n\n  public componentDidMount() {\n    window.addEventListener('scroll', this.handleWindowScroll);\n    this.handleWindowResize();\n    window.addEventListener('resize', this.handleWindowResize);\n  }\n\n  public componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleWindowScroll);\n    window.removeEventListener('resize', this.handleWindowResize);\n  }\n\n  private getContainerSelectorFocus = () => {\n    const { containerSelectorFocus } = this.props;\n    return this.$container.closest(containerSelectorFocus);\n  };\n\n  private handleWindowResize = () => {\n    const { stickyEnableRange } = this.props;\n    const [min, max] = stickyEnableRange;\n    this.setState({\n      isEnableSticky: window.innerWidth >= min && window.innerWidth <= max,\n    });\n  };\n\n  private handleWindowScroll = async () => {\n    const { onChange } = this.props;\n    const { isEnableSticky } = this.state;\n    const isSticky = this.checkSticky();\n    const $containerSelectorFocus = this.getContainerSelectorFocus();\n    const { innerHeight: windowHeight } = window;\n    if (this.$container && this.$inner && isEnableSticky) {\n      const { clientHeight: innerHeight } = this.$inner;\n      const containerMeasure = this.$container.getBoundingClientRect();\n      const targetHeight = $containerSelectorFocus\n        ? $containerSelectorFocus.clientHeight\n        : Infinity;\n      await this.setState({\n        containerMeasure: {\n          top: containerMeasure.top,\n          left: containerMeasure.left,\n          width: containerMeasure.width,\n          height: innerHeight,\n        },\n        targetHeight,\n        isLong: innerHeight > windowHeight,\n      });\n      if (innerHeight > windowHeight) {\n        this.handleLong();\n      } else {\n        this.handleShort();\n      }\n      if (this.isPrevSticky !== isSticky) {\n        onChange(isSticky);\n      }\n      this.isPrevSticky = isSticky;\n    }\n  };\n\n  private checkWrapBottom = () => {\n    const { offsetTop } = this.props;\n    const $containerSelectorFocus = this.getContainerSelectorFocus();\n    const { containerMeasure, isLong } = this.state;\n    const targetHeight = $containerSelectorFocus\n      ? $containerSelectorFocus.clientHeight\n      : Infinity;\n    return (\n      (containerMeasure as any)?.top -\n        (containerMeasure as any)?.height +\n        (isLong\n          ? (containerMeasure as any)?.height - window.innerHeight + offsetTop\n          : 0) -\n        offsetTop <\n      targetHeight * -1 -\n        (this.getContainerSelectorFocusOffsetTop() -\n          this.getContainerOffsetTop())\n    );\n  };\n\n  private handleLong = () => {\n    const { scrollY } = window;\n    if (this.prevScrollY > scrollY) {\n      this.handleLongScrollUp(scrollY);\n    } else {\n      this.handleLongScrollDown(scrollY);\n    }\n    this.prevScrollY = scrollY;\n  };\n\n  private getInnerTop = () => {\n    const innerMeasure = this.$inner.getBoundingClientRect();\n    const innerTop = innerMeasure.top || -1;\n    return innerTop;\n  };\n\n  private getInnerOffsetTop = () => {\n    return offset(this.$inner).top;\n  };\n\n  private getContainerOffsetTop = () => {\n    return offset(this.$container).top;\n  };\n\n  private getContainerSelectorFocusOffsetTop = () => {\n    const $containerSelectorFocus = this.getContainerSelectorFocus();\n    return $containerSelectorFocus ? offset($containerSelectorFocus).top : 0;\n  };\n\n  private getContainerSelectorFocusOffsetBottom = () => {\n    const $containerSelectorFocus = this.getContainerSelectorFocus();\n    return $containerSelectorFocus\n      ? Math.trunc(\n          offset($containerSelectorFocus).top +\n            $containerSelectorFocus.clientHeight\n        )\n      : 0;\n  };\n\n  private getInnerPositionTop = () => {\n    if (this.$container && this.$inner) {\n      return this.getInnerOffsetTop() - this.getContainerOffsetTop();\n    }\n    return 0;\n  };\n\n  private handleLongScrollUp = async (scrollY: number) => {\n    const { offsetTop } = this.props;\n    const { containerMeasure, innerPosition } = this.state;\n    const isTop = (containerMeasure as any).top > offsetTop;\n    const innerTop = this.getInnerTop();\n    if (isTop) {\n      this.setState({\n        innerPosition: 'static',\n      });\n    } else {\n      if (\n        (containerMeasure as any).top <= innerTop &&\n        (innerPosition === 'fixedBottom' ||\n          (innerPosition === 'absoluteBottom' &&\n            scrollY + window.innerHeight <=\n              this.getContainerSelectorFocusOffsetBottom()))\n      ) {\n        await this.setState({\n          innerPosition: 'absoluteCenter',\n        });\n      }\n      this.setInnerPositionFixedTop();\n    }\n  };\n\n  private setInnerPositionFixedTop = () => {\n    const { offsetTop } = this.props;\n    const { innerPosition } = this.state;\n    const innerTop = this.getInnerTop();\n    this.setState({\n      innerTop: this.getInnerPositionTop(),\n    });\n    if (innerTop >= offsetTop && innerPosition === 'absoluteCenter') {\n      this.setState({\n        innerPosition: 'fixedTop',\n      });\n    }\n  };\n\n  private handleLongScrollDown = (scrollY: number) => {\n    const { containerMeasure, innerPosition } = this.state;\n    const isBottom =\n      Math.trunc(scrollY + window.innerHeight) >=\n      Math.trunc(this.getInnerOffsetTop() + (containerMeasure as any).height);\n    const isWrapBottom = this.checkWrapBottom();\n    if (innerPosition === 'fixedTop') {\n      this.setState({\n        innerPosition: 'absoluteCenter',\n      });\n    }\n    if (isWrapBottom) {\n      this.setState({\n        innerPosition: 'absoluteBottom',\n      });\n    } else if (isBottom) {\n      this.setState({\n        innerPosition: 'fixedBottom',\n        innerTop: this.getInnerPositionTop(),\n      });\n    }\n  };\n\n  private getShortPosition = (\n    containerMeasure: StickyState['containerMeasure']\n  ) => {\n    const { offsetTop } = this.props;\n    if ((containerMeasure as any).top <= offsetTop) {\n      if (this.checkWrapBottom()) {\n        return 'absoluteBottom';\n      }\n      return 'fixedTop';\n    }\n    return 'static';\n  };\n\n  private handleShort = () => {\n    const { containerMeasure } = this.state;\n    this.setState({\n      innerPosition: this.getShortPosition(containerMeasure),\n    });\n  };\n\n  private getInnerStyle = (): CSSProperties => {\n    const { offsetTop, zIndex } = this.props;\n    const {\n      targetHeight,\n      innerPosition,\n      containerMeasure,\n      isLong,\n      innerTop,\n    } = this.state;\n    const topForAbsoluteBottom =\n      targetHeight -\n      (containerMeasure as any).height +\n      (this.getContainerSelectorFocusOffsetTop() -\n        this.getContainerOffsetTop());\n    if (isLong) {\n      switch (innerPosition) {\n        case 'static':\n          return {};\n        case 'fixedTop':\n          return {\n            position: 'fixed',\n            top: offsetTop,\n            width: containerMeasure.width,\n            zIndex,\n          };\n        case 'absoluteCenter':\n          return {\n            position: 'absolute',\n            top: innerTop,\n            width: containerMeasure.width,\n            zIndex,\n          };\n        case 'absoluteBottom':\n          return {\n            position: 'absolute',\n            top: topForAbsoluteBottom,\n            width: containerMeasure.width,\n            zIndex,\n          };\n        case 'fixedBottom':\n          return {\n            position: 'fixed',\n            bottom: 0,\n            width: containerMeasure.width,\n            zIndex,\n          };\n        default:\n          return {};\n      }\n    }\n    switch (innerPosition) {\n      case 'static':\n        return {};\n      case 'absoluteBottom':\n        return {\n          position: 'absolute',\n          top: topForAbsoluteBottom,\n          width: containerMeasure.width,\n          zIndex,\n        };\n      case 'fixedTop':\n        return {\n          position: 'fixed',\n          top: offsetTop,\n          width: containerMeasure.width,\n          zIndex,\n        };\n      default:\n        return {};\n    }\n  };\n\n  private getContainerStyle = (): CSSProperties => {\n    const { innerPosition, containerMeasure } = this.state;\n    if (innerPosition === 'static') {\n      return {\n        minHeight: containerMeasure.height,\n      };\n    }\n    return {\n      position: 'relative',\n      minHeight: containerMeasure.height,\n    };\n  };\n\n  private checkSticky = () => {\n    const { innerPosition } = this.state;\n    return innerPosition.search(/fixedTop|fixedBottom/g) !== -1;\n  };\n\n  private setContainerRef = (c: any) => {\n    this.$container = c;\n  };\n\n  private setInnerRef = (c: any) => {\n    this.$inner = c;\n  };\n\n  private renderHackGetHeightWhenInnerContentMargin = () => {\n    return <div style={{ fontSize: 0, visibility: 'hidden' }}>.</div>;\n  };\n\n  private renderChildren = () => {\n    const { children } = this.props;\n    const isSticky = this.checkSticky();\n    return typeof children === 'function' ? children(isSticky) : children;\n  };\n\n  public render() {\n    const { isEnableSticky } = this.state;\n    const containerStyle = isEnableSticky ? this.getContainerStyle() : {};\n    const innerStyle = isEnableSticky ? this.getInnerStyle() : {};\n    return (\n      <div ref={this.setContainerRef} style={containerStyle}>\n        <div ref={this.setInnerRef} style={innerStyle}>\n          {this.renderHackGetHeightWhenInnerContentMargin()}\n          {this.renderChildren()}\n          {this.renderHackGetHeightWhenInnerContentMargin()}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Sticky;\n"],"names":["offset","el","doc","ownerDocument","docElem","documentElement","win","nodeType","defaultView","getWindow","box","top","left","getBoundingClientRect","pageYOffset","clientTop","pageXOffset","clientLeft","Sticky","isEnableSticky","targetHeight","Infinity","innerPosition","containerMeasure","isLong","innerTop","_this","$container","closest","props","containerSelectorFocus","stickyEnableRange","setState","window","innerWidth","onChange","state","isSticky","checkSticky","$containerSelectorFocus","getContainerSelectorFocus","_window","windowHeight","innerHeight","$inner","_context","clientHeight","width","height","handleLong","handleShort","isPrevSticky","offsetTop","getContainerSelectorFocusOffsetTop","getContainerOffsetTop","scrollY","prevScrollY","handleLongScrollUp","handleLongScrollDown","Math","trunc","getInnerOffsetTop","_this$state2","isTop","getInnerTop","_context2","getContainerSelectorFocusOffsetBottom","setInnerPositionFixedTop","getInnerPositionTop","isBottom","isWrapBottom","checkWrapBottom","getShortPosition","zIndex","topForAbsoluteBottom","position","bottom","minHeight","search","c","React","style","fontSize","visibility","children","_proto","componentDidMount","addEventListener","this","handleWindowScroll","handleWindowResize","componentWillUnmount","removeEventListener","render","containerStyle","getContainerStyle","innerStyle","getInnerStyle","ref","setContainerRef","setInnerRef","renderHackGetHeightWhenInnerContentMargin","renderChildren","PureComponent"],"mappings":"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"}